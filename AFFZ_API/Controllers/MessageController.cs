using AFFZ_API.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AFFZ_API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MessageController : ControllerBase
    {
        private readonly MyDbContext _context;
        private readonly ILogger<MessageController> _logger;
        public MessageController(MyDbContext context, ILogger<MessageController> logger)
        {
            _context = context;
            _logger = logger;
        }
        [HttpGet("UserMessageList/{userId}")]
        public async Task<IActionResult> UserMessageList(int userId)
        {
            try
            {
                /*logginh the SQL query generated by EF Core for testing*/
                var sql = _context.ChatMessages.Where(x => x.SenderId == userId || x.ReceiverId == userId).ToQueryString();
                /*logginh the SQL query generated by EF Core for testing*/
                _logger.LogInformation($"Generated SQL: {sql}");
                var messages = await _context.ChatMessages
          .Where(x => x.SenderId == userId || x.ReceiverId == userId)
          .ToListAsync();
                if (!messages.Any())
                {
                    _logger.LogWarning("No Messages found");
                    return Ok(messages);
                }

                _logger.LogInformation("No Messages found retrieved successfully");
                return Ok(messages);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while getting the file list.");
                return StatusCode(500, "Internal server error.");
            }
        }
        [HttpGet("MerchantMessageList/{merchantId}")]
        public async Task<IActionResult> MerchantMessageList(int merchantId)
        {
            try
            {
                /*logginh the SQL query generated by EF Core for testing*/
                var sql = _context.ChatMessages.Where(x => x.SenderId == merchantId || x.ReceiverId == merchantId).ToQueryString();
                /*logginh the SQL query generated by EF Core for testing*/
                _logger.LogInformation($"Generated SQL: {sql}");
                var messages = await _context.ChatMessages
          .Where(x => x.SenderId == merchantId || x.ReceiverId == merchantId)
          .ToListAsync();
                if (!messages.Any())
                {
                    _logger.LogWarning("No Messages found");
                    return Ok(messages);
                }

                _logger.LogInformation("No Messages found retrieved successfully");
                return Ok(messages);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while getting the file list.");
                return StatusCode(500, "Internal server error.");
            }
        }
        [HttpPost("SendMessage")]
        public async Task<IActionResult> SendMessage(ChatterMessage message)
        {
            try
            {
                //if (ModelState.IsValid)
                {

                    message.MessageTimestamp = DateTime.Now;
                    message.CreatedDate = DateTime.Now;
                    message.CreatedBy = message.SenderId;
                    ChatMessage chatMessage = new ChatMessage();
                    chatMessage.SenderId = message.SenderId;
                    chatMessage.ReceiverId = message.ReceiverId;
                    chatMessage.MessageType = message.MessageType;
                    chatMessage.MessageContent = message.MessageContent;
                    chatMessage.MessageTimestamp = message.MessageTimestamp;
                    chatMessage.IsRead = false;
                    chatMessage.CreatedDate = DateTime.Now;
                    chatMessage.CreatedBy = message.SenderId;
                    chatMessage.MerchantId = message.MerchantId;
                    chatMessage.ModifyDate = DateTime.Now;
                    /*chatMessage.CreatedByNavigation = _context.Users.Where(x => x.UserId == message.SenderId).FirstOrDefault();
                    chatMessage.Merchant = _context.Merchants.Where(x => x.MerchantId == message.ReceiverId).FirstOrDefault();
                    chatMessage.ModifiedByNavigation = _context.Users.Where(x => x.UserId == message.SenderId).FirstOrDefault();
                    chatMessage.Receiver = _context.Users.Where(x => x.UserId == message.SenderId).FirstOrDefault();
                    chatMessage.Sender = _context.Users.Where(x => x.UserId == message.SenderId).FirstOrDefault();*/
                    _context.ChatMessages.Add(chatMessage);
                    await _context.SaveChangesAsync();
                    return Ok("Message Sent Successfully.");
                }
                //else
                //{
                //    return StatusCode(500, "Message Sending Failed.");
                //}
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while saving the message.");
                return StatusCode(500, "Internal server error.");
            }
        }
        [HttpGet("contacts")]
        public async Task<IActionResult> GetContactsAsync(int id, bool IsMerchant = false)
        {
            try
            {
                var contacts = await _context.ChatMessages
            .GroupBy(m => new { m.SenderId, m.ReceiverId })
            .Select(g => new
            {
                ContactId = g.Key.SenderId != 0 ? g.Key.SenderId : g.Key.ReceiverId,
                LastMessage = g.OrderByDescending(m => m.MessageTimestamp).FirstOrDefault().MessageContent,
                LastMessageTime = g.OrderByDescending(m => m.MessageTimestamp).FirstOrDefault().MessageTimestamp
            })
            .ToListAsync();

                var contactList = contacts.Select(c => new Contact
                {
                    Id = c.ContactId,
                    Name = $"User {c.ContactId}", // Replace with actual user name lookup if available
                    LastMessage = c.LastMessage,
                    LastMessageTime = c.LastMessageTime
                }).ToList();


                if (!contactList.Any())
                {
                    _logger.LogWarning("No Messages found");
                    return Ok(contactList);
                }

                _logger.LogInformation("No Messages found retrieved successfully");
                return Ok(contactList);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while getting the file list.");
                return StatusCode(500, "Internal server error.");
            }
        }
        [HttpGet("messages/{sender}/{receiver}")]
        public async Task<IActionResult> GetMessagesAsync(string sender, string receiver)
        {
            try
            {
                int senderId = Convert.ToInt32(sender);
                int receiverId = Convert.ToInt32(receiver);
                var getquery = _context.ChatMessages
             .Where(m => (m.SenderId == senderId && m.ReceiverId == receiverId) ||
                         (m.SenderId == receiverId && m.ReceiverId == senderId))
             .OrderBy(m => m.MessageTimestamp).ToQueryString();
                var messages = await _context.ChatMessages
             .Where(m => (m.SenderId == senderId) ||
                         (m.ReceiverId == senderId))
             .OrderBy(m => m.MessageTimestamp)
             //.Select(m => new ChatterMessage
             //{
             //    MessageId = m.MessageId,
             //    SenderId = m.SenderId, // Adjust to string if needed
             //    ReceiverId = m.ReceiverId, // Adjust to string if needed
             //    MessageContent = m.MessageContent,
             //    MessageTimestamp = m.MessageTimestamp
             //})
             .ToListAsync();


                if (!messages.Any())
                {
                    _logger.LogWarning("No Messages found");
                    return Ok(messages);
                }

                _logger.LogInformation("No Messages found retrieved successfully");
                return Ok(messages);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while getting the file list.");
                return StatusCode(500, "Internal server error.");
            }
        }
    }
}
