<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<div class="page-wrapper page-settings">
    <div class="content">
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h4 class="fw-bold">Provider Management</h4>
            <div class="btn-group"> 
                <a href="customers.html" class="btn btn-outline-primary active" data-bs-toggle="tooltip" title="Customer List">
                    <i class="bi bi-list-ul"></i>
                </a>
                <a href="localization.html" class="btn btn-outline-secondary" data-bs-toggle="tooltip" title="Settings">
                    <i class="bi bi-gear"></i>
                </a>
            </div>
        </div>

        <!-- Customer Table -->
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Provider List</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover table-striped align-middle">
                        <thead class="table-primary">
                            <tr>
                                <th>#</th>
                                <th>Provider Name</th>
                                <th>Mobile</th>
                                <th>Registration Date</th>
                                <th>Address</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int index = 0;
                            }
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@(index + 1)</td>
                                    <td>@item.Email</td>
                                    <td>@item.PhoneNumber</td>
                                    <td>@item.CreatedDate.ToString("dd MMM yyyy")</td>
                                    <td>@item.Address</td>
                                    <td class="text-center">
                                        <button class="btn btn-sm btn-info me-2 show-documents" type="button"
                                                data-bs-toggle="modal" data-bs-target="#edit-customer"
                                                data-provider-id="@item.ProviderId" data-bs-toggle="tooltip" title="View Documents">
                                            <i class="bi bi-file-earmark-text"></i>
                                        </button>

                                        <button class="btn btn-sm btn-toggle-status"
                                                type="button"
                                                data-provider-id="@item.ProviderId"
                                                data-is-active="@item.IsActive"
                                                data-bs-toggle="tooltip"
                                                title="@(item.IsActive ? "Deactivate" : "Activate")">
                                            <i class="bi @(item.IsActive ? "bi-toggle-on text-success" : "bi-toggle-off text-secondary")"></i>
                                        </button>
                                    </td>
                                </tr>
                                index++;
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Edit Customer Modal -->
<div class="modal fade" id="edit-customer" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Merchant Documents</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-striped align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>#</th>
                                <th>Document</th>
                                <th>Preview</th>
                                <th>Status</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="merchant-documents-body">
                            <!-- Content loaded dynamically via JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Image Viewer Modal -->
<div class="modal fade" id="image-viewer-modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Document Viewer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="viewer-content" class="text-center">
                    <!-- Content for image or PDF viewer will be dynamically loaded -->
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="toggle-status-modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Status Change</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="toggle-status-message">Are you sure you want to change the status of this merchant?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirm-toggle-status">Confirm</button>
            </div>
        </div>
    </div>
</div>
<script>
    document.querySelectorAll('.show-documents').forEach(button => {
        button.addEventListener('click', async () => {
            const providerId = button.getAttribute('data-provider-id');
            await loadMerchantDocuments(providerId);
        });
    });

    async function loadMerchantDocuments(providerId) {
        try {
            // Inject Razor variable as a string
            const apiLink = '@ViewBag.APILink';
            const response = await fetch(`${apiLink}Providers/GetMerchantDocs/${providerId}`);
            const documents = await response.json();
            const documentsBody = document.getElementById('merchant-documents-body');
            documentsBody.innerHTML = '';
            console.log(response);

            // Inject Razor variable as a string
            const baseUrl = '@ViewBag.MerchantLink';

            documents.forEach((doc, index) => {
                // Extract the path from "Uploads" onward
                const relativePath = doc.folderName.split("Uploads")[1];
                const DownloadFilePath = `\\Uploads\\${relativePath.replace(/\\/g, '\\')}`;
                const fileUrl = `${baseUrl}Uploads${relativePath.replace(/\\/g, '/')}`;

                const isImage = /\.(jpg|jpeg|png|gif)$/i.test(fileUrl);
                const isPDF = /\.pdf$/i.test(fileUrl);
                const viewIcon = isImage ? 'fe fe-image' : isPDF ? 'fe fe-file-text' : '';

                // Conditionally render buttons based on document status
                let actionButtons = '';
                if (doc.status === 'Verified') {
                    actionButtons = `
                                <button onclick="downloadFile('${DownloadFilePath}')" class="btn btn-primary btn-sm">
                                    <i class="fe fe-download"></i> Download File
                                </button>`;
                } else if (doc.status === 'Rejected') {
                    actionButtons = `
                                <span class="text-muted">Waiting for new file</span>`;
                } else {
                    actionButtons = `
                                <button class="btn btn-success btn-sm update-status" data-doc-id="${doc.mdid}" data-status="Verified">
                                    <i class="fe fe-check"></i> Accept
                                </button>
                                <button class="btn btn-danger btn-sm update-status" data-doc-id="${doc.mdid}" data-status="Rejected">
                                    <i class="fe fe-x"></i> Reject
                                </button>`;
                }

                // Add the document row to the table
                documentsBody.innerHTML += `
                                    <tr>
                                        <td>${index + 1}</td>
                                        <td>${doc.fileName}</td>
                                        <td>
                                            <button class="btn btn-link view-document" data-doc-path="${fileUrl}">
                                                <i class="${viewIcon}"></i>
                                            </button>
                                        </td>
                                        <td>
                                            <span class="badge bg-${doc.status === 'Verified' ? 'success' : doc.status === 'Rejected' ? 'danger' : 'warning'}">
                                                ${doc.status}
                                            </span>
                                        </td>
                                        <td>
                                            ${actionButtons}
                                        </td>
                                    </tr>`;
            });

            initializeEventListeners(providerId);
        } catch (error) {
            console.error('Error loading merchant documents:', error);
            alert('Failed to load merchant documents. Please try again.');
        }
    }


    function initializeEventListeners(providerId) {
        // Handle document view
        document.querySelectorAll('.view-document').forEach(viewButton => {
            viewButton.addEventListener('click', () => {
                const docPath = viewButton.getAttribute('data-doc-path');
                const viewerContent = document.getElementById('viewer-content');

                if (/\.(jpg|jpeg|png|gif)$/i.test(docPath)) {
                    viewerContent.innerHTML = `
    <img src="${docPath}" class="img-fluid" alt="Document Image">`;
                    new bootstrap.Modal(document.getElementById('image-viewer-modal')).show();
                } else if (/\.pdf$/i.test(docPath)) {
                    window.open(docPath, '_blank');
                } else {
                    alert('Unsupported file format.');
                }
            });
        });

        // Handle status update
        document.querySelectorAll('.update-status').forEach(statusButton => {
            statusButton.addEventListener('click', async () => {
                const docId = statusButton.getAttribute('data-doc-id');
                const newStatus = statusButton.getAttribute('data-status');
                const apiLink = '@ViewBag.APILink';
                try {
                    
                    const response = await fetch(`${apiLink}Providers/UpdateDocumentStatus`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            MDid: docId,
                            status: newStatus
                        }),
                    });

                    if (response.ok) {
                        alert('Status updated successfully.');
                        // Reload the modal content to reflect the changes
                        await loadMerchantDocuments(providerId);
                    } else {
                        const errorData = await response.json();
                        console.error('Failed to update status:', errorData);
                        alert(`Error: ${errorData.title || 'Failed to update status.'}`);
                    }
                } catch (error) {
                    console.error('An error occurred during status update:', error);
                    alert('An unexpected error occurred. Please try again.');
                }
            });
        });
    }
    function downloadFile(filePath) {
        // Replace backslashes with forward slashes
        //const normalizedPath = filePath.replace(/\\/g, '/');
        console.log(filePath);
        window.location.href = `/Providers/DownloadFile?filePath=${filePath}`;
    }


     let selectedProviderId = null;
    let newStatus = null;

    document.querySelectorAll('.btn-toggle-status').forEach(button => {
        button.addEventListener('click', () => {
            selectedProviderId = button.getAttribute('data-provider-id');
            const isActive = button.getAttribute('data-is-active') === "true";
            newStatus = !isActive;

            const message = isActive
                ? "Are you sure you want to deactivate this merchant?"
                : "Are you sure you want to activate this merchant?";
            document.getElementById("toggle-status-message").textContent = message;

            new bootstrap.Modal(document.getElementById('toggle-status-modal')).show();
        });
    });

    document.getElementById('confirm-toggle-status').addEventListener('click', async () => {
        try {
            const apiLink = '@ViewBag.APILink';
            const response = await fetch(`${apiLink}Providers/ToggleMerchantStatus`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ providerId: selectedProviderId, isActive: newStatus }),
            });

            if (response.ok) {
                alert("Status updated successfully.");
                location.reload(); // Refresh the page to show updated status
            } else {
                alert("Failed to update status.");
            }
        } catch (error) {
            console.error("Error updating status:", error);
            alert("An error occurred. Please try again.");
        }
    });
    
        document.addEventListener('DOMContentLoaded', function () {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
</script>